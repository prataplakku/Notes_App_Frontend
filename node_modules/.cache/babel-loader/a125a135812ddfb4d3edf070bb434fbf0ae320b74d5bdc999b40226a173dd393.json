{"ast":null,"code":"var _jsxFileName = \"D:\\\\notes_app\\\\frontend\\\\src\\\\Notes.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n\n// Helper function for formatting the timestamp\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatTimestamp = timestamp => {\n  const date = new Date(timestamp);\n  return date.toLocaleString();\n};\nfunction Notes({\n  notes,\n  setNotes,\n  username\n}) {\n  _s();\n  const [newNote, setNewNote] = useState('');\n  const addNote = async () => {\n    if (newNote.trim() === '') {\n      alert('Note cannot be empty. Please write something before adding.');\n      return;\n    }\n    const response = await fetch('http://localhost:8000/api/add_note/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        note: newNote\n      })\n    });\n    const data = await response.json();\n    if (response.ok) {\n      setNotes(prevNotes => [...prevNotes, data.note]);\n      alert(data.message || 'Note added successfully');\n      setNewNote('');\n    } else {\n      alert(data.error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Hello \", username, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Your Notes:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: notes.map(note => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [note.content, \" (Created at: \", formatTimestamp(note.timestamp), \")\"]\n      }, note.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"New note\",\n      value: newNote,\n      onChange: e => setNewNote(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addNote,\n      style: {\n        marginLeft: '10px',\n        padding: '10px 20px',\n        backgroundColor: '#007bff',\n        color: 'white',\n        border: 'none',\n        borderRadius: '5px',\n        cursor: 'pointer'\n      },\n      children: \"Add Note\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n_s(Notes, \"lRmJ3W/mkguH9OYB3c+BBVzs83Q=\");\n_c = Notes;\nexport default Notes;\nvar _c;\n$RefreshReg$(_c, \"Notes\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","formatTimestamp","timestamp","date","Date","toLocaleString","Notes","notes","setNotes","username","_s","newNote","setNewNote","addNote","trim","alert","response","fetch","method","headers","body","JSON","stringify","note","data","json","ok","prevNotes","message","error","children","fileName","_jsxFileName","lineNumber","columnNumber","map","content","id","type","placeholder","value","onChange","e","target","onClick","style","marginLeft","padding","backgroundColor","color","border","borderRadius","cursor","_c","$RefreshReg$"],"sources":["D:/notes_app/frontend/src/Notes.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\n// Helper function for formatting the timestamp\r\nconst formatTimestamp = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    return date.toLocaleString();  \r\n};\r\n\r\nfunction Notes({ notes, setNotes, username }) {\r\n    const [newNote, setNewNote] = useState('');\r\n\r\n    const addNote = async () => {\r\n        if (newNote.trim() === '') {\r\n            alert('Note cannot be empty. Please write something before adding.');\r\n            return;\r\n        }\r\n        const response = await fetch('http://localhost:8000/api/add_note/', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ username, note: newNote })\r\n        });\r\n\r\n        const data = await response.json();\r\n        if (response.ok) {\r\n            setNotes(prevNotes => [...prevNotes, data.note]);  \r\n            alert(data.message || 'Note added successfully');\r\n            setNewNote('');\r\n        } else {\r\n            alert(data.error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Hello {username} </h2>\r\n            <h2>Your Notes:</h2>\r\n            <ul>\r\n                {notes.map(note => (\r\n                    <li key={note.id}>\r\n                        {note.content} (Created at: {formatTimestamp(note.timestamp)})\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            <input \r\n                type=\"text\" \r\n                placeholder=\"New note\" \r\n                value={newNote}\r\n                onChange={e => setNewNote(e.target.value)} \r\n            />\r\n            <button onClick={addNote} style={{\r\n                            marginLeft: '10px',\r\n                            padding: '10px 20px',\r\n                            backgroundColor: '#007bff',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '5px',\r\n                            cursor: 'pointer'\r\n                        }}>Add Note</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Notes;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}