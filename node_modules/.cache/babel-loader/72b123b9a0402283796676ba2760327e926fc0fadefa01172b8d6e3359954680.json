{"ast":null,"code":"var _jsxFileName = \"D:\\\\notes_app\\\\frontend\\\\src\\\\Notes.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Notes({\n  notes\n}) {\n  _s();\n  const [newNote, setNewNote] = useState('');\n  const addNote = async () => {\n    var _notes$;\n    const response = await fetch('http://localhost:8000/api/add_note/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: (_notes$ = notes[0]) === null || _notes$ === void 0 ? void 0 : _notes$.username,\n        note: newNote\n      })\n    });\n    const data = await response.json();\n    if (response.ok) {\n      setNewNote('');\n      alert('Note added!');\n    } else {\n      alert(data.error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), notes.map(note => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: note.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: note.timestamp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 21\n      }, this)]\n    }, note.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: newNote,\n      placeholder: \"Write a new note...\",\n      onChange: e => setNewNote(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addNote,\n      children: \"Add Note\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n}\n_s(Notes, \"lRmJ3W/mkguH9OYB3c+BBVzs83Q=\");\n_c = Notes;\nexport default Notes;\nvar _c;\n$RefreshReg$(_c, \"Notes\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Notes","notes","_s","newNote","setNewNote","addNote","_notes$","response","fetch","method","headers","body","JSON","stringify","username","note","data","json","ok","alert","error","children","fileName","_jsxFileName","lineNumber","columnNumber","map","content","timestamp","id","type","value","placeholder","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["D:/notes_app/frontend/src/Notes.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction Notes({ notes }) {\r\n    const [newNote, setNewNote] = useState('');\r\n\r\n    const addNote = async () => {\r\n        const response = await fetch('http://localhost:8000/api/add_note/', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ username: notes[0]?.username, note: newNote })\r\n        });\r\n\r\n        const data = await response.json();\r\n        if (response.ok) {\r\n            setNewNote('');\r\n            alert('Note added!');\r\n        } else {\r\n            alert(data.error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Notes</h2>\r\n            {notes.map(note => (\r\n                <div key={note.id}>\r\n                    <p>{note.content}</p>\r\n                    <small>{note.timestamp}</small>\r\n                </div>\r\n            ))}\r\n            <input type=\"text\" value={newNote} placeholder=\"Write a new note...\" onChange={e => setNewNote(e.target.value)} />\r\n            <button onClick={addNote}>Add Note</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Notes;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,KAAKA,CAAC;EAAEC;AAAM,CAAC,EAAE;EAAAC,EAAA;EACtB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMQ,OAAO,GAAG,MAAAA,CAAA,KAAY;IAAA,IAAAC,OAAA;IACxB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;MAChEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,QAAQ,GAAAR,OAAA,GAAEL,KAAK,CAAC,CAAC,CAAC,cAAAK,OAAA,uBAARA,OAAA,CAAUQ,QAAQ;QAAEC,IAAI,EAAEZ;MAAQ,CAAC;IACxE,CAAC,CAAC;IAEF,MAAMa,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClC,IAAIV,QAAQ,CAACW,EAAE,EAAE;MACbd,UAAU,CAAC,EAAE,CAAC;MACde,KAAK,CAAC,aAAa,CAAC;IACxB,CAAC,MAAM;MACHA,KAAK,CAACH,IAAI,CAACI,KAAK,CAAC;IACrB;EACJ,CAAC;EAED,oBACIrB,OAAA;IAAAsB,QAAA,gBACItB,OAAA;MAAAsB,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACbxB,KAAK,CAACyB,GAAG,CAACX,IAAI,iBACXhB,OAAA;MAAAsB,QAAA,gBACItB,OAAA;QAAAsB,QAAA,EAAIN,IAAI,CAACY;MAAO;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrB1B,OAAA;QAAAsB,QAAA,EAAQN,IAAI,CAACa;MAAS;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA,GAFzBV,IAAI,CAACc,EAAE;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGZ,CACR,CAAC,eACF1B,OAAA;MAAO+B,IAAI,EAAC,MAAM;MAACC,KAAK,EAAE5B,OAAQ;MAAC6B,WAAW,EAAC,qBAAqB;MAACC,QAAQ,EAAEC,CAAC,IAAI9B,UAAU,CAAC8B,CAAC,CAACC,MAAM,CAACJ,KAAK;IAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClH1B,OAAA;MAAQqC,OAAO,EAAE/B,OAAQ;MAAAgB,QAAA,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1C,CAAC;AAEd;AAACvB,EAAA,CAhCQF,KAAK;AAAAqC,EAAA,GAALrC,KAAK;AAkCd,eAAeA,KAAK;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}